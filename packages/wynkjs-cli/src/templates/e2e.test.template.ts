/**
 * E2E Test Template for Module Generation
 * Generated by wynkjs-cli
 */

export const e2eTestTemplate = (moduleName: string) => {
  const capitalizedName =
    moduleName.charAt(0).toUpperCase() + moduleName.slice(1);

  return `/**
 * E2E Tests for ${capitalizedName} Module
 * Tests all ${moduleName} endpoints with real HTTP requests
 */

import { describe, test, expect, beforeAll, afterAll } from "bun:test";
import {
  startTestApp,
  stopTestApp,
  request,
  parseJson,
  expectStatus,
  type TestApp,
} from "./setup";
import { ${capitalizedName}Controller } from "../../src/modules/${moduleName}/${moduleName}.controller";

describe("${capitalizedName} Module E2E", () => {
  let app: TestApp;
  let created${capitalizedName}Id: string;

  beforeAll(async () => {
    // Use a unique port to avoid conflicts with other E2E tests
    const port = 3000 + Math.floor(Math.random() * 9000);
    app = await startTestApp([${capitalizedName}Controller], port);
  });

  afterAll(async () => {
    await stopTestApp(app);
  });

  describe("GET /${moduleName}", () => {
    test("should return list of ${moduleName}s", async () => {
      const response = await request(\`\${app.baseUrl}/${moduleName}\`);
      expectStatus(response, 200);

      const data = await parseJson(response);
      expect(data.data).toBeDefined();
      expect(Array.isArray(data.data)).toBe(true);
    });
  });

  describe("POST /${moduleName}", () => {
    test("should create a new ${moduleName}", async () => {
      const ${moduleName}Data = {
        name: "Test ${capitalizedName}",
        // Add more fields as needed
      };

      const response = await request(\`\${app.baseUrl}/${moduleName}\`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(${moduleName}Data),
      });

      expectStatus(response, 200);
      const responseData = await parseJson(response);
      expect(responseData.data.name).toBe(${moduleName}Data.name);
      expect(responseData.data.id).toBeDefined();

      created${capitalizedName}Id = responseData.data.id;
    });

    test("should validate required fields", async () => {
      const invalid${capitalizedName} = {};

      const response = await request(\`\${app.baseUrl}/${moduleName}\`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(invalid${capitalizedName}),
      });

      expectStatus(response, 400);
      const data = await parseJson(response);
      expect(data.errors).toBeDefined(); // Validation errors array
      expect(data.message).toBe("Validation failed");
    });
  });

  describe("GET /${moduleName}/:id", () => {
    test("should return a ${moduleName} by id", async () => {
      const response = await request(
        \`\${app.baseUrl}/${moduleName}/\${created${capitalizedName}Id}\`
      );
      expectStatus(response, 200);

      const data = await parseJson(response);
      expect(data.data.id).toBe(created${capitalizedName}Id);
    });

    test("should return 404 for non-existent ${moduleName}", async () => {
      const response = await request(
        \`\${app.baseUrl}/${moduleName}/non-existent-id\`
      );
      expectStatus(response, 404);
    });
  });

  describe("PUT /${moduleName}/:id", () => {
    test("should fully update a ${moduleName}", async () => {
      await new Promise((resolve) => setTimeout(resolve, 2));

      const updates = {
        name: "Updated ${capitalizedName} Name",
        // Add more fields as needed
      };

      const response = await request(
        \`\${app.baseUrl}/${moduleName}/\${created${capitalizedName}Id}\`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updates),
        }
      );

      expectStatus(response, 200);
      const responseData = await parseJson(response);
      expect(responseData.data.name).toBe(updates.name);
    });

    test("should return 404 when updating non-existent ${moduleName}", async () => {
      const updates = { name: "Test" };

      const response = await request(\`\${app.baseUrl}/${moduleName}/fake-id-999\`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updates),
      });

      expectStatus(response, 404);
    });
  });

  describe("PATCH /${moduleName}/:id", () => {
    test("should partially update a ${moduleName}", async () => {
      const updates = { name: "Partially Updated ${capitalizedName}" };

      const response = await request(
        \`\${app.baseUrl}/${moduleName}/\${created${capitalizedName}Id}\`,
        {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updates),
        }
      );

      expectStatus(response, 200);
      const responseData = await parseJson(response);
      expect(responseData.data.name).toBe(updates.name);
    });

    test("should return 404 for non-existent ${moduleName}", async () => {
      const response = await request(
        \`\${app.baseUrl}/${moduleName}/fake-id-patch\`,
        {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name: "test" }),
        }
      );

      expectStatus(response, 404);
    });
  });

  describe("DELETE /${moduleName}/:id", () => {
    test("should delete an existing ${moduleName}", async () => {
      const response = await request(
        \`\${app.baseUrl}/${moduleName}/\${created${capitalizedName}Id}\`,
        {
          method: "DELETE",
        }
      );

      expectStatus(response, 200);

      // Verify it's deleted
      const getResponse = await request(
        \`\${app.baseUrl}/${moduleName}/\${created${capitalizedName}Id}\`
      );
      expectStatus(getResponse, 404);
    });

    test("should return 404 when deleting non-existent ${moduleName}", async () => {
      const response = await request(
        \`\${app.baseUrl}/${moduleName}/non-existent-999\`,
        {
          method: "DELETE",
        }
      );

      expectStatus(response, 404);
    });
  });

  describe("Full ${capitalizedName} Lifecycle", () => {
    test("should complete create, read, update, delete workflow", async () => {
      // 1. Create
      const ${moduleName}Data = { name: "Workflow ${capitalizedName}" };
      const createRes = await request(\`\${app.baseUrl}/${moduleName}\`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(${moduleName}Data),
      });
      expectStatus(createRes, 200);
      const created = await parseJson(createRes);

      // 2. Read
      const readRes = await request(\`\${app.baseUrl}/${moduleName}/\${created.data.id}\`);
      expectStatus(readRes, 200);
      const read = await parseJson(readRes);
      expect(read.data.id).toBe(created.data.id);

      // 3. Update
      await new Promise((resolve) => setTimeout(resolve, 2));
      const updateRes = await request(\`\${app.baseUrl}/${moduleName}/\${created.data.id}\`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: "Updated Workflow ${capitalizedName}" }),
      });
      expectStatus(updateRes, 200);
      const updated = await parseJson(updateRes);
      expect(updated.data.name).toBe("Updated Workflow ${capitalizedName}");

      // 4. Delete
      const deleteRes = await request(\`\${app.baseUrl}/${moduleName}/\${created.data.id}\`, {
        method: "DELETE",
      });
      expectStatus(deleteRes, 200);

      // 5. Verify deletion
      const verifyRes = await request(\`\${app.baseUrl}/${moduleName}/\${created.data.id}\`);
      expectStatus(verifyRes, 404);
    });
  });

  describe("Error Handling", () => {
    test("should handle invalid JSON body", async () => {
      const response = await request(\`\${app.baseUrl}/${moduleName}\`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: "invalid json{",
      });

      expect([400, 500]).toContain(response.status);
    });

    test("should return 404 for non-existent resources", async () => {
      const response = await request(\`\${app.baseUrl}/${moduleName}/non-existent\`);
      expectStatus(response, 404);
    });
  });
});
`;
};
